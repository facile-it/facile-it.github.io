<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Facile.it Engineering</title>
    <link>https://engineering.facile.it/categories/javascript/</link>
    <description>Recent content in JavaScript on Facile.it Engineering</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://engineering.facile.it/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a scalable Redux web app</title>
      <link>https://engineering.facile.it/blog/eng/building-a-scalable-redux-web-app/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      <guid>https://engineering.facile.it/blog/eng/building-a-scalable-redux-web-app/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;There is inconsistency in the Redux community on how to use actions. Redux Toolkit documentation suggests the following approach:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;[&amp;hellip;] we recommend trying to treat actions more as &amp;ldquo;describing events that occurred&amp;rdquo;, rather than &amp;ldquo;setters&amp;rdquo;.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;Why should we treat actions as events rather than setters? Dan Abramov, the founder of Redux, said that Redux doesn&amp;rsquo;t reinvent event sourcing. It&amp;rsquo;s up to people how to use it. It&amp;rsquo;s clear that there isn&amp;rsquo;t a well-accepted approach towards how to use actions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Angular Components: from AngularJS to &#34;just Angular&#34;</title>
      <link>https://engineering.facile.it/blog/eng/angular-components-from-angularjs-to-just-angular/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      <guid>https://engineering.facile.it/blog/eng/angular-components-from-angularjs-to-just-angular/</guid>
      <description>&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://engineering.facile.it/images/web-components-a-path-to-angular-2/angular.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt;With version 1.5 and newer, AngularJS (which for clarity we&amp;rsquo;ll call &lt;a href=&#34;http://angularjs.blogspot.it/2016/12/ok-let-me-explain-its-going-to-be.html#Its_just_Angular_39&#34;&gt;&lt;em&gt;just Angular&lt;/em&gt;&lt;/a&gt; from now on, even though the naming convention was &lt;a href=&#34;http://angularjs.blogspot.it/2017/01/branding-guidelines-for-angular-and.html&#34;&gt;recently updated&lt;/a&gt;) introduced their own interpretation of &lt;a href=&#34;https://www.webcomponents.org/&#34;&gt;Web Components&lt;/a&gt;, back-porting &lt;em&gt;Components&lt;/em&gt; from Angular 2.&lt;/p&gt;&#xA;&lt;p&gt;Using &lt;em&gt;Components&lt;/em&gt; with Angular today not only means writing code much more easily upgradeable to future framework versions (especially using ES6), but it also allows you to modularize and reuse code more easily, in line with the modern frontend programming style that will be more and more modular.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
