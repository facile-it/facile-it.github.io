<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.js on Facile.it Engineering</title>
    <link>https://engineering.facile.it/categories/node.js/</link>
    <description>Recent content in Node.js on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Oct 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://engineering.facile.it/categories/node.js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NestJS graceful shutdown for RabbitMQ Microservices</title>
      <link>https://engineering.facile.it/blog/eng/nest-js-graceful-shutdown/</link>
      <pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/nest-js-graceful-shutdown/</guid>
      <description>Dealing with a graceful shutdown is essential for a resilient and proficient application. In this article, I am going to explain how you can deal with this technique in NestJS using RabbitMQ as a Message Broker through the Microservices feature.
What is the problem? In my current job, my team deals with asynchronous jobs in our project daily.
Because of the intrinsic nature of asynchronous jobs, they take a long time to execute, sometimes over 30 seconds.</description>
    </item>
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>https://engineering.facile.it/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/graphql-an-introduction/</guid>
      <description>The lesson we learned with REST For many developers, nowadays, building an API for their applications essentially means mapping the resources of the domain to URIs, with the REST principles in mind. Usually creating a RESTful system is not difficult, and the simplicity of the idea makes the task easier. Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:
 Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.</description>
    </item>
    
  </channel>
</rss>