<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>security on Facile.it Engineering</title>
    <link>https://engineering.facile.it/categories/security/</link>
    <description>Recent content in security on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 May 2024 17:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://engineering.facile.it/categories/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hack the Box Experience</title>
      <link>https://engineering.facile.it/blog/eng/hack-the-box-experience/</link>
      <pubDate>Thu, 30 May 2024 17:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/hack-the-box-experience/</guid>
      <description>After the successful experience of having a code challenge in March 2024, we decided to go further in delivering experiences to our colleagues.
Scouting around, I turned to Alessio Giorgianni, a developer with a passion for white hat hacking competition. We agree to try an experience using a platform called Hack the Box. Hack the Box Academy offers lots of information and training about IT Security and, in our case, some exercises we can use for hacking dummy applications, with a whitebox example (i.</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>https://engineering.facile.it/blog/eng/json-web-tokens/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/json-web-tokens/</guid>
      <description>When I started my study about JWT, I was searching for a smart method to authenticate a request, without querying the database each time to check the applicant reliability. I needed a token or something similar with the ability to validate itself and flexible enough to customize the validation strategy. Imagine for example a web application where a user can login and obtain a &amp;ldquo;pass&amp;rdquo; with his name and an expiration time, and this pass will let him ask for resources until the pass expires, and only if the issuer is trusted.</description>
    </item>
    
    <item>
      <title>Protection of sensitive data using encryption</title>
      <link>https://engineering.facile.it/blog/eng/protection-of-sensitive-data-using-encryption/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/protection-of-sensitive-data-using-encryption/</guid>
      <description>Data protection is one of the major and recurrent problems in recent years: whether it is private information of users, or the company for which we work, the problem is always the same.
How to protect such data from any attackers who would - and could (!!) - be able to gain possession?
Before arriving at the solution of this problem, however, is right to split the series in at least two branches.</description>
    </item>
    
    <item>
      <title>Protezione di dati sensibili usando la crittografia</title>
      <link>https://engineering.facile.it/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</guid>
      <description>La protezione dei dati è uno dei problemi più sentiti e ricorrenti degli ultimi anni: che si tratti di informazioni private di utenti, o dell&amp;rsquo;azienda per cui lavoriamo, il problema è sempre lo stesso.
Come proteggere questi dati da eventuali malintenzionati che vorrebbero - e potrebbero(!!) - riuscire a entrarne in possesso ?
Prima di arrivare alla soluzione di questo problema però, è doveroso suddividere la casistica in almeno due rami.</description>
    </item>
    
  </channel>
</rss>