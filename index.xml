<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Facile.it Engineering</title>
    <link>https://engineering.facile.it/</link>
    <description>Recent content on Facile.it Engineering</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 21 Apr 2023 11:02:00 +0000</lastBuildDate>
    
	<atom:link href="https://engineering.facile.it/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Venerd√¨ Protetto - April 14th 2023</title>
      <link>https://engineering.facile.it/blog/eng/v-protetto14-4-2023/</link>
      <pubDate>Fri, 21 Apr 2023 11:02:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/v-protetto14-4-2023/</guid>
      <description>This page contains the abstracts of the talks held during the latest Venerd√¨ Protetto on April 14, 2023.
Topics:
 Backstage by Lee Mills (Spotify) Code revolution by Mirko Urru &amp;amp; Stefano Giurgiano (Facile.it) Dynamic forms by Giovanni Fiorentino (Facile.it)  Backstage An introduction to Backstage, managing the chaos by Lee Mills, Spotify
At the beginning of this year, our engineering teams adopted a new tool: Backstage, an open-source platform for building developer portals created at Spotify.</description>
    </item>
    
    <item>
      <title>Venerd√¨ Protetto, AKA Protected Friday</title>
      <link>https://engineering.facile.it/blog/eng/v-protetto/</link>
      <pubDate>Fri, 21 Apr 2023 11:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/v-protetto/</guid>
      <description>What is it all about? At Facile.it, we strongly believe in sharing knowledge and experiences. Thus, we dedicate one Friday a month to expanding our knowledge and learning among colleagues in the IT department. These Fridays are called Venerd√¨ Protetto. During the so-called Venerd√¨ Protetto, i. e. Protected Friday, we welcome speakers and participate in talks on IT-related topics. Speakers are colleagues or external guests.
Archive of talks The archive of all Venerd√¨ Protetto talks is available here.</description>
    </item>
    
    <item>
      <title>MADR template for capturing decisions</title>
      <link>https://engineering.facile.it/blog/eng/madr-template-for-capturing-decisions/</link>
      <pubDate>Tue, 28 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/madr-template-for-capturing-decisions/</guid>
      <description>MADR template for capturing decisions Developing a project or a product implies, for the engineering teams, the need to make many decisions to reach their goals. Therefore, the teams are often faced with an inevitable and usually not-so-exciting step: capturing and recording significant decisions. This article will give you a taste of what it takes to make decisions during project or product development and will provide you with a standard that can be used in different contexts.</description>
    </item>
    
    <item>
      <title>Building a scalable Redux web app</title>
      <link>https://engineering.facile.it/blog/eng/building-a-scalable-redux-web-app/</link>
      <pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/building-a-scalable-redux-web-app/</guid>
      <description>Introduction There is inconsistency in the Redux community on how to use actions. Redux Toolkit documentation suggests the following approach:
 [&amp;hellip;] we recommend trying to treat actions more as &amp;ldquo;describing events that occurred&amp;rdquo;, rather than &amp;ldquo;setters&amp;rdquo;.
 Why should we treat actions as events rather than setters? Dan Abramov, the founder of Redux, said that Redux doesn&amp;rsquo;t reinvent event sourcing. It&amp;rsquo;s up to people how to use it. It&amp;rsquo;s clear that there isn&amp;rsquo;t a well-accepted approach towards how to use actions.</description>
    </item>
    
    <item>
      <title>How I became a GitLab contributor to fix an issue in our project&#39;s CI/CD pipeline</title>
      <link>https://engineering.facile.it/blog/eng/how-i-became-a-gitlab-contributor-to-fix-an-issue-in-our-projects-cicd-pipeline/</link>
      <pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/how-i-became-a-gitlab-contributor-to-fix-an-issue-in-our-projects-cicd-pipeline/</guid>
      <description>Introduction During these months at Facile.it I had to face many challenges regarding the improvement of CI/CD pipelines for the Insurance team, with a strong focus on performance and reusability. The focus on these topics is very important as it allows us to follow GitLab best practices for CI/CD such as the fail fast principle.
 üí¨
Fail fast: On the CI side, devs committing code need to know as quickly as possible if there are issues so they can roll the code back and fix it while it‚Äôs fresh in their minds.</description>
    </item>
    
    <item>
      <title>On Living Documentation</title>
      <link>https://engineering.facile.it/blog/eng/on-living-documentation/</link>
      <pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/on-living-documentation/</guid>
      <description>Today I want to talk about living documentation, having just finished the aptly-named book by Cyrille Martraire, Living Documentation: continuous knowledge sharing by design, published by Pearson.
The need for documentation Documentation supplements the knowledge we might not have. Lack of knowledge manifests in:
  Wasted time (finding the missing points or guessing them).
  Biased decisions due to this lack.
  Hint: when you don‚Äôt know something, you are usually not aware that you don&amp;rsquo;t know it ;)</description>
    </item>
    
    <item>
      <title>Careers</title>
      <link>https://engineering.facile.it/ita/careers/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/ita/careers/</guid>
      <description>Facile.it is constantly growing and we are always looking for IT professionals to join our team. This proposal is aimed at experienced developers who believe in innovation and are always on the lookout for new technologies and can&amp;rsquo;t wait to put them to work. We are a dynamic, young and fun team. We are more than 100 professionals and manage numerous projects with different technology stacks.
What we offer at Facile.</description>
    </item>
    
    <item>
      <title>Write the Docs Prague 2021</title>
      <link>https://engineering.facile.it/blog/eng/writethedocs-prague-2021/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/writethedocs-prague-2021/</guid>
      <description>Introduction Facile.it&amp;rsquo;s Technical Writing team attended the Write the Docs Prague 2021 conference which was held from 3rd to 5th October 2021. While the conference was usually held in the capital of the Czech Republic, for the second year in a row it was held remotely due to Covid-19 restrictions. In this article we will provide a quick overview of the event.
What is Write the Docs Prague Write the Docs Prague is the annual European conference organized by the Write the Docs community.</description>
    </item>
    
    <item>
      <title>Technical Writers: the mystery unveiled</title>
      <link>https://engineering.facile.it/blog/eng/technical-writers-an-introduction/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/technical-writers-an-introduction/</guid>
      <description>The technical writer, this mysterious character Let&amp;rsquo;s face it, being a technical writer (especially in Italy) makes you feel a bit like Barney Stinson from How I Met Your Mother: no one knows what your real job is. If you&amp;rsquo;re a tech writer, we bet you have at least one relative who, at every family gathering, asks you &amp;ldquo;What do you exactly do for a living?&amp;quot;. In the most desperate cases, even your mom doesn&amp;rsquo;t know what your job is!</description>
    </item>
    
    <item>
      <title>How to write a functional test with Symfony and Guzzle&#39;s mock handler</title>
      <link>https://engineering.facile.it/blog/eng/functional-testing-symfony-guzzle/</link>
      <pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/functional-testing-symfony-guzzle/</guid>
      <description>Introduction When we write a client to integrate an API in our systems it is important to test it to be sure we can handle every possible response. Guzzle client provides a very simple way to mock external APIs responses: Guzzle Mock Handler. This tool provides a mock handler that can be used to fulfill HTTP requests with a response or exception by shifting return values off of a queue.</description>
    </item>
    
    <item>
      <title>Careful with that constant, developer</title>
      <link>https://engineering.facile.it/blog/eng/careful-with-that-constant-developer/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/careful-with-that-constant-developer/</guid>
      <description>Introduction Imagine you need to use a fixed numeric value in your code, let&amp;rsquo;s say 20000. It is what we call a literal constant, that is a value that will always remain the exact same in your code.
Now imagine you need to use that value more than once. Sooner or later you will read your code and you will not remember what 20000 was, it will happen for sure. But what if you assign the value to an immutable variable with a meaningful name?</description>
    </item>
    
    <item>
      <title>Types of software testing</title>
      <link>https://engineering.facile.it/blog/eng/different-types-of-software-testing/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/different-types-of-software-testing/</guid>
      <description>Why do I need to test? Everyone who works in software development has stumbled upon software testing.
Why should a developer know anything about testing?
Well, software testing is a valuable asset and a big part of development: it does not only test the application, it also teaches to think outside the box and to write code with quality in mind.
Software testing is not finding bugs The goal of software testing is not only to find bugs and &amp;ldquo;break things&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Automated testing: a step back</title>
      <link>https://engineering.facile.it/blog/eng/automated-testing-a-step-back/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/automated-testing-a-step-back/</guid>
      <description>The goal of this article is to define basic concepts related to testing, trying not to take anything for granted.
Why do we test?? Why is it important to write automated tests? I asked myself and I did some research because the answer to this question was not obvious to me. I knew it was important but I didn&amp;rsquo;t know why. So, I decided to try to explain it starting from a point of view as impartial as possible.</description>
    </item>
    
    <item>
      <title>PHPDay 2020</title>
      <link>https://engineering.facile.it/blog/eng/php-day-2020/</link>
      <pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/php-day-2020/</guid>
      <description>The 2020 edition of PHPDay took place on September 8th in a remote fashion.
Having experienced the 2019 edition (indeed my first one, despite being a PHP developer from eons!) I would say that it was a little difficult to stay focused for such a long event. However, given the high-quality level of lecturers and talks, it was totally worth the effort.
I would like to thank the folks at Grusp for their passionate work.</description>
    </item>
    
    <item>
      <title>Lambda Days 2020</title>
      <link>https://engineering.facile.it/blog/eng/lambda-days-2020/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/lambda-days-2020/</guid>
      <description>This year, Facile attended for the first time Lambda Days Conference in the beautiful polish city of Krakow. It has been a two-days full immersion with speakers coming from all over the world. The latest trends and academic research in the functional world were showcased, spanning from beginner&amp;rsquo;s approaches to functional languages to highly specific scientific applications. This conference was totally worth attending, albeit very intense (sometimes mind-bending, actually!). All the talks were of high quality and the organization was perfect.</description>
    </item>
    
    <item>
      <title>From zero to infinite: the Final keyword</title>
      <link>https://engineering.facile.it/blog/eng/from-zero-to-infinite-the-final-keyword/</link>
      <pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/from-zero-to-infinite-the-final-keyword/</guid>
      <description>Google from zero to infinite Sometimes I do a full immersion on topics of my interest, generally related to programming, topics on testing, good design, etc. I apply a technique invented by me named: &amp;ldquo;Google from zero to infinite&amp;rdquo;.
Basically I use one or more keywords in Google, then I literally follow all the links of all the pages. It is a very long and laborious activity. However, most of the time I find very interesting documents, otherwise difficult to reach.</description>
    </item>
    
    <item>
      <title>Operators: an overview</title>
      <link>https://engineering.facile.it/blog/eng/operators-overview/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/operators-overview/</guid>
      <description>Introduction Operators are useful constructors and they are present in most programming languages. They are fundamental for many operations and in this article we will provide an overview to better understand their properties.
This article is the first in a series of two about operators. Here we will make an overview of the main operators&amp;rsquo; properties and in the next one we will discuss about some custom operators that we use in our production code.</description>
    </item>
    
    <item>
      <title>Common problems faced by PHP developers in consuming an AMQP message</title>
      <link>https://engineering.facile.it/blog/eng/common-problems-faced-by-php-developers-in-consuming-an-ampq-message/</link>
      <pubDate>Wed, 29 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/common-problems-faced-by-php-developers-in-consuming-an-ampq-message/</guid>
      <description>When we use RabbitMQ and our project is in PHP, we have to run a Consumer and we could encounter some common and still unresolved problems.
In order to implement RabbitMQ in the project, there are different ready to use packages, especially when we use a framework like Symfony or Laravel. Usually these packages provide the full integration needed for the AMQP protocol, so we can easily configure it and create a Producer and a Consumer; then, we have to create a little script that will supervise the PHP process in order to make sure that all our consumers are running.</description>
    </item>
    
    <item>
      <title>Continuous deployment from GitLab CI to Kubernetes using Docker-in-Docker</title>
      <link>https://engineering.facile.it/blog/eng/continuous-deployment-from-gitlab-ci-to-k8s-using-docker-in-docker/</link>
      <pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/continuous-deployment-from-gitlab-ci-to-k8s-using-docker-in-docker/</guid>
      <description>In the last month, I&amp;rsquo;m working on two different PHP projects here at Facile.it: in the first one, which is new and still in development, I decided to adopt GitLab CI for the build, since we use GitLab CE for our Git repositories; I then created a continuous deployment pipeline for the staging environment, directly to a Kubernetes cluster, leveraging Docker Compose to make the configuration easier.
After, I decided to start migrating a previous, internal project of mine to the same approach, since it&amp;rsquo;s currently in production with a dumb approach that provokes some downtime during deployments; on the contrary, doing a rolling deployment with Kubernetes is surprisingly easy!</description>
    </item>
    
    <item>
      <title>Is it all PHP OPCache&#39;s fault?</title>
      <link>https://engineering.facile.it/blog/eng/realpath-cache-is-it-all-php-opcache-s-fault/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/realpath-cache-is-it-all-php-opcache-s-fault/</guid>
      <description>Abstract Upon migrating to a new infrastructure we started experiencing cache issues after each deploy: as we refreshed pages that were updated by the new release, we didn&amp;rsquo;t see the right content for a very short period of time. Initially, we wrongly assumed that the cause of this issue was the PHP OPcache extension but, after our investigation, we understood that real path cache was the culprit.
Introduction When I started my software developer career, I was very surprised to read the following sentence, attributed to Phil Karlton: ¬´There are only two hard things in Computer Science: cache invalidation and naming things¬ª.</description>
    </item>
    
    <item>
      <title>How to gradually upgrade toward PHPUnit 6 with namespaced classes</title>
      <link>https://engineering.facile.it/blog/eng/phpunit-upgrade-namespace/</link>
      <pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/phpunit-upgrade-namespace/</guid>
      <description>In the latest months I wrote multiple times, in different projects, code migrating PHPUnit toward major version 6. This upgrade is harder than the previous one, since in this version it was introduced a big breaking change: all classes got (finally!) namespaced.
This means that any usage of those classes in your project needs to be updated. It may seem a simple find &amp;amp; replace job, but since you need to introduce at least one use PHPUnit\Framework\TestCase line at the top of each one of your test classes, it&amp;rsquo;s a boring and a little more than trivial task; also, upgrading it in a single big jump may not be feasible or prudent, especially in the case of open source or distributed libraries, where backward compatibility and support for old PHP versions must be ensured.</description>
    </item>
    
    <item>
      <title>Why type hints and interfaces are not visual debt</title>
      <link>https://engineering.facile.it/blog/eng/visual-debt-typehints/</link>
      <pubDate>Wed, 31 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/visual-debt-typehints/</guid>
      <description>A few days ago I stumbled on a strange tweet that was highlighting a controversy about scalar type hints.
Scalar type hints &amp;amp; return types vs no scalar type hints &amp;amp; return types is #PHP&amp;#39;s new spaces vs tabs
&amp;mdash; Cees-Jan üîä Kiewiet (@WyriHaximus) 19 maggio 2017  After asking references about this, someone alluded to this very short video: &amp;ldquo;PHP Bits: Visual Debt&amp;rdquo; (it&amp;rsquo;s only 3 minutes, please watch it before continue reading).</description>
    </item>
    
    <item>
      <title>Facile.it devs @ phpDay 2017</title>
      <link>https://engineering.facile.it/blog/eng/php-day-2017/</link>
      <pubDate>Tue, 16 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/php-day-2017/</guid>
      <description>Like clockwork, on May we head up to Verona to attend the phpDay conference; this time it was on May 12th and 13th.
We met a lot of new people and known fellow PHP developers, and like previous years, we wanted to write down a light summary; like the previous ones, this won&amp;rsquo;t be a full &amp;ldquo;review&amp;rdquo; of the conference, but an highlight of the talks that captured most of our attention, or what we found more valuable for our everyday work.</description>
    </item>
    
    <item>
      <title>#FacileHack 2017, 10 days later</title>
      <link>https://engineering.facile.it/blog/eng/facilehack-2017-10-days-later/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/facilehack-2017-10-days-later/</guid>
      <description>Ten days ago #FacileHack 2017 came to its conclusion; this was the second edition of the hackathon organized by Facile.it. Holding an event of this kind has allowed us to see, work and discuss with many very diverse teams, made up of programmers, designers and marketers.
The hackathon&amp;rsquo;s theme for this year was connectivity: our site offers the comparation between internet access services, and we have decided to put this at the center of the competition.</description>
    </item>
    
    <item>
      <title>#FacileHack 2017, 10 giorni dopo</title>
      <link>https://engineering.facile.it/blog/ita/facilehack-2017-10-giorni-dopo/</link>
      <pubDate>Tue, 04 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facilehack-2017-10-giorni-dopo/</guid>
      <description>Dieci giorni fa √® terminato #FacileHack 2017, la seconda edizione dell&amp;rsquo;hackathon organizzato da Facile.it. Tenere un evento di questo genere ci ha permesso di vedere all&amp;rsquo;opera e di confrontarci con tanti team molto eterogenei, composti da programmatori, designer e specialisti del marketing.
Il tema dell&amp;rsquo;hackathon di quest&amp;rsquo;anno √® stata la connettivit√†: il nostro portale propone la comparazione dei servizi di connessione ad internet, e ha deciso di porre questo al centro della competizione.</description>
    </item>
    
    <item>
      <title>#FacileHack 2017 ci siamo quasi</title>
      <link>https://engineering.facile.it/blog/ita/facilehack-2017-ci-siamo-quasi/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facilehack-2017-ci-siamo-quasi/</guid>
      <description>Mancano meno di 4 giorni alla seconda edizione di #FacileHack, la maratona dedicata a coders, creativi e marketing specialist organizzata dalla nostra azienda che si svolger√† a Milano presso il Talent Garden di via Arcivescovo Calabiana.
Attesa grande partecipazione all&amp;rsquo;evento anche da fuori Italia, le registrazioni sono state chiuse per sold-out all&amp;rsquo;inizio di questo mese.
In meno di 24 ore gli hackers partecipanti dovranno confrontarsi, mettendo a dura prova le proprie capacit√† fisiche e creative, per presentare un&amp;rsquo;idea o un prototipo in grado di ottenere il punteggio massimo della giuria di qualit√†.</description>
    </item>
    
    <item>
      <title>Using Kotlin type-safe builders to create a DSL for Forms</title>
      <link>https://engineering.facile.it/blog/eng/kotlin-dsl/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/kotlin-dsl/</guid>
      <description>Here at Facile.it we are constantly dealing with a lot of forms: we use them to collect various information and data needed to feed our in-house comparing algorithms. These forms could be really complex, having multiple rules and dependencies between fields, and they are likely to be changed and tuned frequently.
When I joined Facile.it, a lot of forms within the Android app needed to be updated or modified and sticking with the existing strategy would have required me to do a lot of work just to add or remove a simple field.</description>
    </item>
    
    <item>
      <title>Angular Components: from AngularJS to &#34;just Angular&#34;</title>
      <link>https://engineering.facile.it/blog/eng/angular-components-from-angularjs-to-just-angular/</link>
      <pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/angular-components-from-angularjs-to-just-angular/</guid>
      <description>With version 1.5 and newer, AngularJS (which for clarity we&amp;rsquo;ll call just Angular from now on, even though the naming convention was recently updated) introduced their own interpretation of Web Components, back-porting Components from Angular 2.
Using Components with Angular today not only means writing code much more easily upgradeable to future framework versions (especially using ES6), but it also allows you to modularize and reuse code more easily, in line with the modern frontend programming style that will be more and more modular.</description>
    </item>
    
    <item>
      <title>Please mutate responsibly: 3 ways to improve your mutable objects</title>
      <link>https://engineering.facile.it/blog/eng/please-mutate-responsibly-3-ways-to-improve-your-mutable-objects/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/please-mutate-responsibly-3-ways-to-improve-your-mutable-objects/</guid>
      <description>Maintaining state is the main cause of complexity and headaches in software development: without a careful consideration of state, our projects will inevitably become impossible to understand. In fact, various development techniques and programming styles are mainly there to handle state in a responsible way: for example, monads, as used in functional programming, are often employed for this very task. A good general way of managing state is trying to make it immutable, either through the use value types, that is, types which instances are passed around with deep copy semantics, or simple immutable objects, which have reference semantics but because they&amp;rsquo;re immutable their state is fixed.</description>
    </item>
    
    <item>
      <title>Codemotion Milan 2016 in review</title>
      <link>https://engineering.facile.it/blog/eng/codemotion-milan-2016-in-review/</link>
      <pubDate>Fri, 02 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/codemotion-milan-2016-in-review/</guid>
      <description>¬´Learn or die¬ª. These are the words with which Codemotion Milan 2016 started on the 25th of November. Most of our development team attended this tech conference like the previous year. Moreover Facile.it was present at the event as a sponsor with his stand looking for new talent.
During the event we also officially announced the second #FacileHack hackathon, which is planned for march 2017.
This post would be a short recap of some talks in chronological order.</description>
    </item>
    
    <item>
      <title>Looking back at Symfony Day Rome 2016</title>
      <link>https://engineering.facile.it/blog/eng/looking-back-at-symfony-day-rome-2016/</link>
      <pubDate>Mon, 07 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/looking-back-at-symfony-day-rome-2016/</guid>
      <description>Every year the GrUSP, in cooperation with one of the italian PHP user groups, organizes the italian Symfony conference. This year the event was organized in the Capital on 28th October with the help of PHP User Group Roma, and a part of Facile Dev Team was there for the occasion. In Facile we believe attending to events like this is a good way to learn new things, share practical experiences and improve our network.</description>
    </item>
    
    <item>
      <title>MessagePack: an alternative to JSON?</title>
      <link>https://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</link>
      <pubDate>Tue, 25 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/message-pack-an-alternative-to-json/</guid>
      <description>When we talk about data interchange in web applications, JSON is the de-facto standard, especially in developing RESTful web services. JSON won against its antagonist XML (SOAP) without a battle, but it didn&amp;rsquo;t prevent the development of alternatives like Google‚Äôs Protocol Buffers, Apache Avro or MessagePack. In being thorough, we should also mention gzip JSON compression (sometimes called &amp;ldquo;JSONC&amp;quot;), and BSON, a bin¬≠ary-en¬≠coded seri¬≠al¬≠iz¬≠a¬≠tion of JSON-like doc¬≠u¬≠ments, both derived directly from JSON.</description>
    </item>
    
    <item>
      <title>A new hope for the JVM: Kotlin</title>
      <link>https://engineering.facile.it/blog/eng/kotlin-intro/</link>
      <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/kotlin-intro/</guid>
      <description>Premise Java is an old programming language. Version 1.0 was released in 1996 by Sun Microsystems and even though it has evolved and grown a lot over the past twenty years it is still carrying on some bad design choices such as null (ask Tony Hoare), primitive types or lack of a proper function type. With the last version of the language (Java 8) Java tried to address some of these problems introducing concepts such as Optional or lambda expression.</description>
    </item>
    
    <item>
      <title>Disclaimer</title>
      <link>https://engineering.facile.it/ita/disclaimer/</link>
      <pubDate>Wed, 21 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/ita/disclaimer/</guid>
      <description>Questo blog non rappresenta una testata giornalistica e viene aggiornato senza alcuna periodicit√†. Non pu√≤ pertanto considerarsi un prodotto editoriale ai sensi della Legge n. 62 del 07/03/2001.
Facile.it S.p.A. non ha e non si assume alcuna responsabilit√† per l&amp;rsquo;attualit√†, la correttezza, la completezza o la qualit√† delle informazioni messe a disposizione, ivi compresi i contenuti dei siti collegati e/o citati.
Facile.it, inoltre, si riserva il diritto e la facolt√† di rimuovere le informazioni proprie e/o fornite da terzi senza alcun preavviso.</description>
    </item>
    
    <item>
      <title>Event-driven serverless applications</title>
      <link>https://engineering.facile.it/blog/eng/event-driven-serverless-applications/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/event-driven-serverless-applications/</guid>
      <description>If we think about computing in the Cloud Era, our mind is immediately drawn towards virtual machines and containers. Therefore, for example, when building a production environment with both approaches we think about the need of patching the operating system and/or upgrading the container. At the end of 2014 Amazon Web Services (AWS) announced a new service called &amp;ldquo;Lambda&amp;quot;, that allows us to focus on business logic and not on infrastructure.</description>
    </item>
    
    <item>
      <title>How PHP 7 &amp; TDD helped me sleep better</title>
      <link>https://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</link>
      <pubDate>Tue, 07 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/how-php-7-tdd-helped-me-sleep-better/</guid>
      <description>The enemies of programming As many of you will agree with me, sleep deprivation is the enemy of programming.
Maybe we fear only one thing more than that: being interrupted.
[![Why you shouldn&#39;t interrupt a programmer (by Jason Heeris)](/images/how-php-7-tdd-helped-me-sleep-better/interruption.png)](http://heeris.id.au/2013/this-is-why-you-shouldnt-interrupt-a-programmer/) While writing code we have to think really hard, we use complex abstractions, we go through long business workflows and so on&amp;hellip; fatigue and interruptions are the main enemies of those in this line of work.</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PhpDay 2016</title>
      <link>https://engineering.facile.it/blog/eng/php-day-2016/</link>
      <pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/php-day-2016/</guid>
      <description>Almost like a nice tradition, we went to the PHP Day conference this year as well; this time too it was held in Verona, on May 13th and 14th.
We participated and attended numerous talks and, as last year, we wanted to write a light summary; this won&amp;rsquo;t be a full &amp;ldquo;review&amp;rdquo;, but our intent instead is to highlight what captured our interest most, or what we found more valuable for our everyday work.</description>
    </item>
    
    <item>
      <title>Faster Web with HTTP/2</title>
      <link>https://engineering.facile.it/blog/eng/faster-web-with-http-2/</link>
      <pubDate>Wed, 11 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/faster-web-with-http-2/</guid>
      <description>HTTP is the protocol that powers the Web. It was originally designed in 1996 for transferring and manipulating simple text-based documents (mainly hypertext resources). Nowadays it&amp;rsquo;s been adopted for many different purposes. It&amp;rsquo;s used for: multimedia content transfer, rich real-time session-based web applications, API messages dispatch, Internet of Things and much more. For this reason, the HTTP specifications are continuously updated, by adding new features and improving performance.
In May 2015, the latest version 2.</description>
    </item>
    
    <item>
      <title>Blog restyling: switching to Hugo and GitHub Pages</title>
      <link>https://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/switching-to-hugo-and-github-pages/</guid>
      <description>As you may have noticed, we went through a bit of a restyling in the last few days, and our blog changed a lot in terms of appearance and structure. We are very happy with those changes, but the reason behind this transition is not just a simple template change.
What we were searching for Before, we were using an hosted CMS to run the blog, Ghost. We were happy with the results, it wasn&amp;rsquo;t our concern to administrate the server or bother about other hosting stuff.</description>
    </item>
    
    <item>
      <title>Droidcon It 2016</title>
      <link>https://engineering.facile.it/blog/eng/droidcon-it-2016/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/droidcon-it-2016/</guid>
      <description>The third edition of Droidcon IT was, as expected, a great conference, full of interesting talks and people coming from all over the world. We saw a lot of GDEs (Google Developer Expert) and also some Developer Advocates from Google, although it was not organized directly by the company. Back in March the Android team surprisingly released the brand new N Developer Preview earlier than expected, so this year we were already able to talk about the new features in Android N and analyze them.</description>
    </item>
    
    <item>
      <title>Json Web Token</title>
      <link>https://engineering.facile.it/blog/eng/json-web-tokens/</link>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/json-web-tokens/</guid>
      <description>When I started my study about JWT, I was searching for a smart method to authenticate a request, without querying the database each time to check the applicant reliability. I needed a token or something similar with the ability to validate itself and flexible enough to customize the validation strategy. Imagine for example a web application where a user can login and obtain a &amp;ldquo;pass&amp;rdquo; with his name and an expiration time, and this pass will let him ask for resources until the pass expires, and only if the issuer is trusted.</description>
    </item>
    
    <item>
      <title>Chi siamo</title>
      <link>https://engineering.facile.it/ita/chi-siamo/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/ita/chi-siamo/</guid>
      <description>This page is also available in english.
Facile.it ha un nutrito e appassionato gruppo di sviluppatori. I progetti del gruppo Facile.it si basano su PHP fin dal 2008, pi√π il tempo passa pi√π nuove tecnologie entrano a far parte del Know How aziendale. Questo Blog permette ai nostri sviluppatori di condividere consigli ed esperienze dirette con le tecnologie che usano quotidianamente.
 Facile.it √® il sito leader nella comparazione online, il gruppo comprende anche i domini Assicurazione.</description>
    </item>
    
    <item>
      <title>Who we are</title>
      <link>https://engineering.facile.it/eng/who-we-are/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/eng/who-we-are/</guid>
      <description>Questa pagina √® disponibile anche in italiano.
Facile.it relies on a big and keen crew of developers. Since 2008, the group‚Äôs projects are based on PHP, and as time goes by new technologies become part of corporate know how. This blog allows our developers to share tips and direct experiences with new technologies.
Facile.it is the leading price comparison website in Italy; also Assicurazione.it, Prestiti.it and Mutui.it are part of the Group.</description>
    </item>
    
    <item>
      <title>Decoupling view controllers with Signals</title>
      <link>https://engineering.facile.it/blog/eng/decoupling-view-controllers-with.signals/</link>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/decoupling-view-controllers-with.signals/</guid>
      <description>Last time we looked at the Signal class, that is, a simple, reusable way of encapsulating the observer pattern. There are many use cases for a signal, and I&amp;rsquo;m going to show one possible application, spawned from a real-world problem. View controllers&amp;rsquo; composition and decoupling is hard: we often need an input from a view controller, that has to send its input back to its creator, while handling the back navigation somehow.</description>
    </item>
    
    <item>
      <title>GraphQL: an introduction</title>
      <link>https://engineering.facile.it/blog/eng/graphql-an-introduction/</link>
      <pubDate>Mon, 18 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/graphql-an-introduction/</guid>
      <description>The lesson we learned with REST For many developers, nowadays, building an API for their applications essentially means mapping the resources of the domain to URIs, with the REST principles in mind. Usually creating a RESTful system is not difficult, and the simplicity of the idea makes the task easier. Let&amp;rsquo;s see some of the consequences and benefits of choosing REST:
 Every HTTP verb has its own meaning, allowing the developer to understand immediately what kind of operation (typically among the CRUD ones) is going to be performed on the resource identified by the URI.</description>
    </item>
    
    <item>
      <title>Write a filesystem with FUSE</title>
      <link>https://engineering.facile.it/blog/eng/write-filesystem-fuse/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/write-filesystem-fuse/</guid>
      <description>During the past year I experimented a lot with file systems in Userspace using FUSE, I wrote this post to share my thoughts about what I did and to give you a starting point to do something by yourself.
Introduction A filesystem is that piece of software that is in charge of storing, organizing and generally taking care of data represented as files and directories. If you are using a device to read this post you are probably using at least one filesystem at the moment.</description>
    </item>
    
    <item>
      <title>Puli: Universal Packages for PHP</title>
      <link>https://engineering.facile.it/blog/ita/puli-universal-packages-for-php/</link>
      <pubDate>Tue, 15 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/puli-universal-packages-for-php/</guid>
      <description>Composer e l&amp;rsquo;ecosistema PHP L&amp;rsquo;ecosistema PHP √® notevolmente cambiato negli ultimi anni grazie all&amp;rsquo;introduzione di Composer. Esso ha definito degli standard per risolvere problemi comuni come l&amp;rsquo;autoloading e la gestione di pacchetti e dipendenze. In questi ultimi anni si √® assistito ad un proliferare di numerose componenti software riusabili che hanno significativamente modificato le strategie di sviluppo.
Nonostante Composer si sia evoluto molto, in alcuni contesti le sue funzionalit√† risultano essere limitanti e incomplete.</description>
    </item>
    
    <item>
      <title>Code reuse: a primer</title>
      <link>https://engineering.facile.it/blog/eng/code-reuse-a-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/code-reuse-a-primer/</guid>
      <description>Last time we looked at a possible implementation for the Optional type in Objective-C; while the main point was to port to Objective-C a tool that&amp;rsquo;s frequently used in Swift, making use of the Optional class can be considered an application of a much more general concept: code reuse. In fact, Optional is not tied to a particular domain, and can be reused over and over again in multiple projects: that&amp;rsquo;s what actually happens in Swift.</description>
    </item>
    
    <item>
      <title>Codice riusabile: un primer</title>
      <link>https://engineering.facile.it/blog/ita/codice-riusabile-un-primer/</link>
      <pubDate>Wed, 09 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/codice-riusabile-un-primer/</guid>
      <description>L&amp;rsquo;ultima volta abbiamo visto una possibile implementazione del tipo Optional in Objective-C; l&amp;rsquo;obiettivo primario dell&amp;rsquo;articolo era quello di importare in Objective-C uno strumento frequentemente utilizzato in Swift, ma usare una classe come Optional pu√≤ essere considerato un&amp;rsquo;applicazione di un concetto molto pi√π generale: il riutilizzo del codice. In effetti, Optional non √® legato a un particolare dominio, e pu√≤ essere riutilizzato pi√π e pi√π volte in molti progetti: questo √® esattamente ci√≤ che accade in Swift.</description>
    </item>
    
    <item>
      <title>Facile.it devs @ Codemotion Milan 2015</title>
      <link>https://engineering.facile.it/blog/ita/facile-it-devs-codemotion-milan-2015/</link>
      <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facile-it-devs-codemotion-milan-2015/</guid>
      <description>L&amp;rsquo;appuntamento con il Codemotion di quest&amp;rsquo;anno a Milano √® stato particolarmente ricco: tante tracce, moltissimi contenuti suddivisi tra talk tecnici, workshop e keynote, e alcuni ospiti illustri, tra cui il celebre Rasmus Lerdorf, creatore del linguaggio PHP. Come gi√† fatto per il PHP Day 2015, proponiamo le nostre impressioni sulla conferenza, citando i talk che ci hanno colpito maggiormente: la scelta dei talk √® basata sul gusto personale dei vari membri della redazione di Facile.</description>
    </item>
    
    <item>
      <title>#FacileHack 2015</title>
      <link>https://engineering.facile.it/blog/ita/facilehack-2015/</link>
      <pubDate>Wed, 25 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/facilehack-2015/</guid>
      <description>Sono stati due giorni ricchi di emozioni quelli trascorsi con i partecipanti di #FacileHack, il primo hackathon organizzato da Facile.it. Abbiamo visto impegno nella competizione, talenti diversi e complementari tra loro, passione per la tecnologia, seriet√† e molto caff√®&amp;hellip; momenti che vogliamo rivivere insieme a voi con questo video.
  Grazie a tutti!</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>https://engineering.facile.it/blog/eng/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/optionals-in-objective-c/</guid>
      <description>Objective-C is not going anywhere. While Swift is most certainly the new hotness for iOS and OS X programming, there are some concrete reasons to stick with Objective-C for a while:
 Objective-C based projects still need maintenance and new features to be added, and mixing Swift and Objective-C, while possible, can be tricky and possibly unconvenient, due to the dynamic nature of the latter; Swift is changing rapidly, has still some bugs and performance problems, and still lacks some features that professionals need, while Objective-C is mature and has a strong community; some may prefer a more dynamic language, and Objective-C support from Apple is still strong;  Personally, while I naturally lean towards a more static, type-first approach to programming, from time to time I like to work in a more dynamic environment, so both for preference and for business needs, I still didn&amp;rsquo;t put Objective-C completely away.</description>
    </item>
    
    <item>
      <title>Optionals in Objective-C</title>
      <link>https://engineering.facile.it/blog/ita/optionals-in-objective-c/</link>
      <pubDate>Mon, 09 Nov 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/optionals-in-objective-c/</guid>
      <description>Objective-C vivr√† ancora per molto. Nonostante Swift sia il nuovo punto di riferimento per lo sviluppo iOS e OS X, ci sono ragioni concrete per scegliere di continuare a sviluppare in Objective-C, almeno per un po&amp;rsquo;:
 progetti esistenti basati su Objective-C richiedono ancora mantenimento e probabile aggiunta di nuove funzionalit√†, e anche se √® tecnicamente possibile mescolare i linguaggi, la cosa pu√≤ risultare poco conveniente per via della natura molto dinamica di Objective-C; Swift sta cambiando rapidamente, presenta ancora alcuni bug e problemi di performance, e il suo workflow manca ancora di alcune feature fondamentali per i professionisti, mentre Objective-C √® un linguaggio maturo, con una community molto vivace; alcuni possono preferire un linguaggio pi√π dinamico, e il supporto di Apple su Objective-C √® ancora forte;  Personalmente ho la tendenza a preferire linguaggi pi√π statici, e un approccio type-first alla programmazione, ma di tanto in tanto mi piace lavorare in un ambiente pi√π dinamico, quindi, sia per preferenza personale che per esigenze di business, non ho ancora messo Objective-C da parte.</description>
    </item>
    
    <item>
      <title>Da sviluppo a produzione con Docker e AWS Elastic Beanstalk</title>
      <link>https://engineering.facile.it/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/da-sviluppo-a-produzione-con-docker-e-aws-elastic-beanstalk/</guid>
      <description>In locale funzionava Questo articolo si rivolge a chi ha gi√† una conoscenza base di docker e del suo funzionamento e sta cercando come avanzare al passo successivo, usandolo quotidianamente in sviluppo e in produzione.
Avere un ambiente di sviluppo/test il pi√π simile possibile a quello di produzione aiuta molto nel garantire un corretto funzionamento dopo il deploy.
In uno scenario tipico, lo sviluppatore ha installati sulla propria macchina locale tutti i servizi da cui dipende la sua applicazione, il che comporta quanto segue:</description>
    </item>
    
    <item>
      <title>From development to production with Docker and AWS Elastic Beanstalk</title>
      <link>https://engineering.facile.it/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</link>
      <pubDate>Mon, 19 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/from-development-to-production-with-docker-and-amazon-ecs/</guid>
      <description>It works on my machine This post is addressed to people who already have basic knowledge about docker, about how it works and are looking for a way to move to the next step with the goal of using it in development and production day by day.
Having a development/testing environment as close as possible to the production one helps a lot in assuring that things will behave correctly when delivered.</description>
    </item>
    
    <item>
      <title>Paraunit: test paralleli, Doctrine e le fixture</title>
      <link>https://engineering.facile.it/blog/ita/paraunit/</link>
      <pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/paraunit/</guid>
      <description>Questo articolo √® la sintesi di un talk presentato al SymfonyDay 2015; potete trovare le slide qui.
I test e la loro durata Sviluppare applicazioni scrivendo test e facendo Test Driven Development √® un&amp;rsquo;ottima pratica, e d√† parecchie soddisfazioni. Con l&amp;rsquo;andare del tempo, si fa crescere la suite di test del proprio progetto, cercando di aumentarne la copertura e l&amp;rsquo;efficacia e si scrivono nuovi test corrispondenti alle nuove funzionalit√† che vengono man mano sviluppate.</description>
    </item>
    
    <item>
      <title>Protection of sensitive data using encryption</title>
      <link>https://engineering.facile.it/blog/eng/protection-of-sensitive-data-using-encryption/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/protection-of-sensitive-data-using-encryption/</guid>
      <description>Data protection is one of the major and recurrent problems in recent years: whether it is private information of users, or the company for which we work, the problem is always the same.
How to protect such data from any attackers who would - and could (!!) - be able to gain possession?
Before arriving at the solution of this problem, however, is right to split the series in at least two branches.</description>
    </item>
    
    <item>
      <title>Protezione di dati sensibili usando la crittografia</title>
      <link>https://engineering.facile.it/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</link>
      <pubDate>Mon, 05 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/protezione-di-dati-sensibili-usando-la-crittografia/</guid>
      <description>La protezione dei dati √® uno dei problemi pi√π sentiti e ricorrenti degli ultimi anni: che si tratti di informazioni private di utenti, o dell&amp;rsquo;azienda per cui lavoriamo, il problema √® sempre lo stesso.
Come proteggere questi dati da eventuali malintenzionati che vorrebbero - e potrebbero(!!) - riuscire a entrarne in possesso ?
Prima di arrivare alla soluzione di questo problema per√≤, √® doveroso suddividere la casistica in almeno due rami.</description>
    </item>
    
    <item>
      <title>WAMP, Web Application Messaging Protocol.. e PHP!</title>
      <link>https://engineering.facile.it/blog/ita/wamp-web-application-messaging-protocol-e-php/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/wamp-web-application-messaging-protocol-e-php/</guid>
      <description>Dalle notifiche di Facebook ad un tweet stream, da Google Docs ai giochi multiplayer in HTML5, la necessit√† di uno scambio dati in due direzioni, efficiente e a bassa latenza, ha determinato l‚Äôascesa negli ultimi anni di soluzioni basate su WebSocket .
Internet delle cose e web 2.0 trovano oramai sempre meno spazio all‚Äôinterno del protocollo HTTP/1. Le tecniche di polling e long polling, in voga fino a pochi anni fa, non permettevano di trasmettere in full duplex (tra server e client) contemporaneamente, erano costrette ad un alto overhead HTTP e richiedevano diversi sforzi per simulare notifiche push server side.</description>
    </item>
    
    <item>
      <title>No Country For If Else</title>
      <link>https://engineering.facile.it/blog/eng/no-country-for-if-else/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/eng/no-country-for-if-else/</guid>
      <description>There is an unwanted guest with us as we write code and build software projects: it&amp;rsquo;s the code that&amp;rsquo;s already written, and we must take into account its complexity as the code base increases in size. High complexity of the existing code can make the following activities particularly difficult:
 understanding the meaning of old code, written by others or ourselves; tracing the causes of bugs, i.e. errors, in code; making changes to a certain procedure; adding features to existing structures;  Even if we approach the development of new software with agile methodologies, we always have to deal with the existing code, and to do that we must at least be able to understand it without overexertion.</description>
    </item>
    
    <item>
      <title>No Country For If Else</title>
      <link>https://engineering.facile.it/blog/ita/no-country-for-if-else/</link>
      <pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/no-country-for-if-else/</guid>
      <description>C&#39;√® un ospite indesiderato che ci accompagna sempre mentre scriviamo codice e realizziamo progetti software: si tratta del codice gi√† esistente, e dobbiamo tener conto della sua complessit√† man mano che la code base aumenta di dimensioni. Un&amp;rsquo;elevata complessit√† del codice pu√≤ rendere le seguenti attivit√† particolarmente difficili:
 comprendere il significato di codice vecchio, scritto da altri o da se stessi; tracciare le cause di bug, cio√® errori, nel codice; eseguire modifiche a una certa procedura; aggiungere funzionalit√† a strutture gi√† esistenti;  Anche approcciando lo sviluppo di nuovo software con metodologie agili, dobbiamo comunque fare i conti con il codice esistente, e per farlo dobbiamo almeno essere in grado di comprenderlo senza sforzi eccessivi.</description>
    </item>
    
    <item>
      <title>Php Summer Camp 2015</title>
      <link>https://engineering.facile.it/blog/ita/php-summer-camp-2015/</link>
      <pubDate>Tue, 08 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/php-summer-camp-2015/</guid>
      <description>Introduzione Dal 26 al 29 agosto 2015 ho avuto l&amp;rsquo;occasione di partecipare al PhpSummerCamp in Rovigno (Croazia). Negli stessi giorni e nello stesso luogo si √® svolto anche il SummerCamp EzPublish. Ci√≤ ha consentito di accrescere ulteriormente la platea di partecipanti con cui √® stato possibile condividere idee e soluzioni.
L&amp;rsquo;evento √® costituito da numerosi workshop orientati allo sviluppo di applicazioni con il framework PHP Symfony. Le mattine e le prime met√† del pomeriggio erano interamente dedicati ai workshop.</description>
    </item>
    
    <item>
      <title>Si fa presto a dire Docker (e OS X)</title>
      <link>https://engineering.facile.it/blog/ita/si-fa-presto-a-dire-docker-e-os-x/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/si-fa-presto-a-dire-docker-e-os-x/</guid>
      <description>Di guide per l&amp;rsquo;installazione di Docker su OS X √® pieno il web, ma le soluzioni sono molte e spesso scegliere non √® facile. In questo articolo vi mostrer√≤ quello che √® stato il mio personale percorso, nella speranza che possa essere utile a chiarirvi le idee e magari evitare qualche buco nell&amp;rsquo;acqua.
Da sviluppatore web, la mia esigenza √® di conservare i sorgenti sulla macchina host e condividerli con la VM; per la natura di PHP, la condivisione deve anche essere molto veloce, poich√© ad ogni richiesta i files verranno letti nuovamente dal disco.</description>
    </item>
    
    <item>
      <title>MiniIAD Vimercate 2015: reportage</title>
      <link>https://engineering.facile.it/blog/ita/miniiad-vimercate-2015-reportage/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/miniiad-vimercate-2015-reportage/</guid>
      <description>Lo scorso 23 Maggio 2015, si √® tenuto a Vimercate, presso la sede di Alcatel-Lucent all&amp;rsquo;Energy Park, il Mini Italian Agile Day.
Anche in occasione di questo evento Facile.it si √® presentata con una piccola delegazione. Sono andato all&amp;rsquo;incontro cercando di polarizzare bene le mie aspettative della giornata. Da un evento della comunit√† Agile mi aspetto un confronto, una crescita, nonch√© l&amp;rsquo;occasione di incontrare qualche volto amico, qualche ex collega o qualche guru a cui chiedere consiglio!</description>
    </item>
    
    <item>
      <title>Programmazione Funzionale: perch√© preoccuparsi?</title>
      <link>https://engineering.facile.it/blog/ita/programmazione-funzionale-perche-preoccuparsi/</link>
      <pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/programmazione-funzionale-perche-preoccuparsi/</guid>
      <description>Nel suo discorso di accettazione del Premio Turing 1972, dal titolo &amp;ldquo;The humble programmer&amp;quot;, Edsger Wybe Dijkstra, uno dei pi√π celebri computing scientists del 20¬∞ secolo (morto nel 2002), affront√≤ le cause della nota Software Crisis, cio√® la crisi che colp√¨ l&amp;rsquo;industria del software nella seconda met√† degli anni sessanta: la potenza e la capacit√† di elaborazione dei computer stavano crescendo esponenzialmente, molto pi√π rapidamente dell&amp;rsquo;abilit√† dei programmatori di gestire la complessit√† e scrivere software funzionante.</description>
    </item>
    
    <item>
      <title>PHP 7 Overview</title>
      <link>https://engineering.facile.it/blog/ita/php-7-overview/</link>
      <pubDate>Mon, 06 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/php-7-overview/</guid>
      <description>Il linguaggio che ha contribuito alla nascita e alla crescita di pi√π del 80% dei siti web oggi online, tra i quali alcuni dei pi√π famosi al mondo, √® prossimo a una svolta.
Secondo la timeline ufficiale PHP 7 sar√† rilasciato intorno al 15 Ottobre 2015: chi volesse provarlo in anteprima, tuttavia, pu√≤ trovare binari, rpm, deb, dockerfiles e quant&amp;rsquo;altro su php7.zend.com.
La release 7 costituisce una delle pi√π importanti per PHP, sia in termini di funzionalit√† che di performance.</description>
    </item>
    
    <item>
      <title>GIT flow e versionamento semantico</title>
      <link>https://engineering.facile.it/blog/ita/git-flow-semantic-versioning/</link>
      <pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/git-flow-semantic-versioning/</guid>
      <description>GIT flow √® un flusso di sviluppo, ideato da Vincent Driessen, che descrive un modello di diramazione, (branching), ben preciso costruito intorno al concetto di release software.
Questo flusso √® concepito per sfruttare al meglio le potenzialit√† del software di versionamento GIT, ma affinit√† concettuali possono essere utili anche per la gestione del lavoro con altri software dediti alla medesima funzionalit√†.
Il flusso descritto in GIT flow √® finalizzato a mantenere una storia implementativa pulita, dove un rilascio comunica a tutti gli utilizzatori la presenza di una nuova versione del prodotto, definita da un determinato changelog composto da nuove caratteristiche e correzioni.</description>
    </item>
    
    <item>
      <title>Continuous Integration con Docker e Drone</title>
      <link>https://engineering.facile.it/blog/ita/continuos-integration-docker-drone/</link>
      <pubDate>Fri, 12 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/continuos-integration-docker-drone/</guid>
      <description>La continuous integration √® una pratica che consiste nel frequente allineamento, su di una base comune definita mainline, delle copie di lavoro degli sviluppatori che collaborano al codice di un progetto.
Introdotta inizialmente da Grady Booch nel 1991, nella pubblicazione Object Oriented Design: With Applications, la pratica √® stata estesa e sviluppata all&amp;rsquo;interno dell&amp;rsquo;extreme programming, fino a sostenere la necessit√† di allineare le copie di lavoro diverse volte al giorno.</description>
    </item>
    
    <item>
      <title>Swift testing avanzato: stubbing e test asincroni</title>
      <link>https://engineering.facile.it/blog/ita/swift-testing-avanzato-stubbing-e-test-asincroni/</link>
      <pubDate>Fri, 05 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/swift-testing-avanzato-stubbing-e-test-asincroni/</guid>
      <description>In un precedente articolo abbiamo visto le impostazioni di base in Xcode per la scrittura dei test unitari: abbiamo evidenziato inoltre l&amp;rsquo;importanza e l&amp;rsquo;utilit√† intrinseca dei test, attraverso un semplice esempio riguardante un caso d&amp;rsquo;uso tipico. Nel presente articolo vedremo alcune tecniche un po&amp;rsquo; pi√π avanzate:
 implementeremo uno Stub Object in Swift; analizzeremo un altro caso di test asincrono;  Lo Stub Object Uno Stub Object (per il resto dell&amp;rsquo;articolo, stub) rappresenta un&amp;rsquo;istanza di una certa classe, la quale mima una vera classe presente nella nostra code base: l&amp;rsquo;istanza si comporta esattamente come una equivalente istanza della classe mimata, tranne alcune differenze, ad esempio alcuni metodi possono essere sovrascritti per poter fornire un determinato output utile per i test.</description>
    </item>
    
    <item>
      <title>Facile.it devs @ PHP Day 2015</title>
      <link>https://engineering.facile.it/blog/ita/php-day-2015/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/php-day-2015/</guid>
      <description>Anche quest&amp;rsquo;anno si √® svolto il PHP Day a Verona, il 15 e 16 maggio. Noi sviluppatori di Facile.it abbiamo partecipato con un folto gruppo e seguito i vari talks.
In questo breve articolo vorremmo citare quelli che in qualche maniera ci hanno colpito, per motivi tecnici e non, per dare l&amp;rsquo;opportunit√† a chi non ha potuto partecipare di sapere qualcosa di pi√π, o per dare un assaggio della conferenza a chi non ha mai partecipato a qualcosa del genere e, speriamo, invogliarlo a far parte della community!</description>
    </item>
    
    <item>
      <title>Intelligenza artificiale: algoritmo A*</title>
      <link>https://engineering.facile.it/blog/ita/intelligenza-artificiale-algoritmo-a-star/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/intelligenza-artificiale-algoritmo-a-star/</guid>
      <description>Introduzione A* √® un algoritmo di ricerca e ottimizzazione basato su grafi. Viene frequentemente impiegato nell&amp;rsquo;intelligenza artificiale perch√© in grado di gestire grafi ampi e indeterminati.
L&amp;rsquo;algoritmo A* pu√≤ essere utilizzato per risolvere problemi come: gioco del 15, percorso minimo, Sudoku, cubo di Rubik, ecc.
In generale, A* pu√≤ risolvere efficacemente i problemi che soddisfano i requisiti:
 La soluzione √® determinata da cambamenti sequenziali di stato rappresentabili con grafi; Il nodo iniziale e il nodo finale devono essere noti.</description>
    </item>
    
    <item>
      <title>Type First Development in Swift</title>
      <link>https://engineering.facile.it/blog/ita/type-first-development-in-swift/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/type-first-development-in-swift/</guid>
      <description>Con Type First Development pu√≤ intendersi un approccio allo sviluppo di nuove funzionalit√† o moduli di un software partendo dai tipi di dati coinvolti: non si tratta quindi di un pattern o una pratica codificata, ma solo di un possibile punto di partenza per iniziare il ragionamento. Ragionando esclusivamente sui tipi, prima ancora di pensare alle singole specifiche implementazioni dei vari blocchi di codice, √® possibile costruire pi√π facilmente una mappa dei vari di flussi di dati che attraversano il nostro software, e verificare immediatamente se stiamo scrivendo qualcosa di sensato, solido ed adeguatamente estendibile.</description>
    </item>
    
    <item>
      <title>Un flusso di lavoro agile</title>
      <link>https://engineering.facile.it/blog/ita/un-flusso-di-lavoro-agile/</link>
      <pubDate>Thu, 30 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/un-flusso-di-lavoro-agile/</guid>
      <description>Parlare di metodologie di lavoro in azienda √® una cosa piuttosto complessa, soprattutto perch√© non √® possibile generalizzare un modo di lavoro che sia universalmente valido. Sento sempre pi√π persone dire &amp;ldquo;con SCRUM avrai risultati assicurati&amp;rdquo;. Lo trovo piuttosto riduttivo.
In sostanza, sempre pi√π persone hanno tradotto i valori ed i princ√¨pi promossi dal manifesto agile in una serie di &amp;ldquo;ricette&amp;rdquo; pronte da seguire fedelmente per ottenere buoni risultati. Cosa c‚Äô√® di &amp;ldquo;agile&amp;rdquo; in tutto ci√≤?</description>
    </item>
    
    <item>
      <title>Introduzione al tracciamento di eventi lato server</title>
      <link>https://engineering.facile.it/blog/ita/tracciamento-di-eventi-lato-server/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/tracciamento-di-eventi-lato-server/</guid>
      <description>L‚Äôadozione di strategie DevOps ha portato negli ultimi anni ad incrementare le aree coperte da tool di monitoring in maniera tale da avere un feedback in tempo reale dello stato dell‚Äôinfrastruttura su cui si basa la propria applicazione, cos√¨ da poter rispondere pro-attivamente a situazioni critiche. Su tale fronte infatti si sono visti comparire i tool pi√π disparati che permettono la raccolta di informazioni, sia dei server o delle istanze su cui vengono eseguite le applicazioni (ad esempio CPU, memoria o disco), che le applicazioni stesse (ad esempio tempi medi di risposta, numero di query eseguite, tempo di esecuzione delle query, ecc.</description>
    </item>
    
    <item>
      <title>Il principio OPEN/CLOSE le sue origini e i casi d&#39;uso</title>
      <link>https://engineering.facile.it/blog/ita/principio-open-close-le-sue-origini-e-i-casi-d-uso/</link>
      <pubDate>Wed, 15 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/principio-open-close-le-sue-origini-e-i-casi-d-uso/</guid>
      <description>Definizione: Il principio OPEN/CLOSE fa riferimento all&amp;rsquo;acronimo SOLID. introdotto da Michael Feathers che riporta alcune buone pratiche di programmazione ad oggetti ancora di forte attualit√†.
OPEN/CLOSE (la O dell&amp;rsquo;acronimo), nella sua definizione pi√π generale indica che: un modulo (un oggetto, una classe o un gruppo di funzioni) debba essere aperto alle estensioni ma chiuso alle modifiche.
Questo principio tuttavia non √® altro che la formalizzazione e il raggruppamento di concetti e linee guida gi√† presenti da tempo nella programmazione ad oggetti.</description>
    </item>
    
    <item>
      <title>Xcode Testing in pratica</title>
      <link>https://engineering.facile.it/blog/ita/xcode-testing-in-pratica/</link>
      <pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/xcode-testing-in-pratica/</guid>
      <description>Tra i molti strumenti utili presenti in Xcode, il testing framework XCTest √® certamente uno dei pi√π rilevanti, non solo per l&amp;rsquo;importanza intrinseca dello Unit Testing in generale, ma soprattutto per la facilit√† con la quale √® possibile scrivere ed eseguire test direttamente dall&amp;rsquo;IDE out-of-the-box, senza la necessit√† di installare componenti di terze parti o impostare una particolare configurazione per i progetti.
In effetti Xcode, al momento della creazione di un nuovo progetto, oltre a creare un target per il binario principale crea automaticamente anche un target di test, cio√® un bundle aggiuntivo che pu√≤ essere caricato nel bundle principale per poter fisicamente eseguire i test una volta avviata l&amp;rsquo;app.</description>
    </item>
    
    <item>
      <title>Gestione di ACL su insiemi di records</title>
      <link>https://engineering.facile.it/blog/ita/gestione-di-acl-su-insiemi-di-records/</link>
      <pubDate>Wed, 01 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/gestione-di-acl-su-insiemi-di-records/</guid>
      <description>Le ACL (Access Control List) sono un strumento molto potente per poter definire l&amp;rsquo;accesso a risorse con una granularit√† molto fine. Nel quotidiano abbiamo gi√† modo di utilizzarle per definire i permessi per accedere a file su Unix o quali pacchetti far passare attraverso un firewall o ancora l&amp;rsquo;accesso a database.
In Symfony le ACL sono disponibili out-of-the-box nel caso di installazione completa e permettono la definizione delle regole di accesso a risorse tramite ruoli e maschere.</description>
    </item>
    
    <item>
      <title>PHP coding standard: PSR-7  HTTP message interfaces</title>
      <link>https://engineering.facile.it/blog/ita/php-fig-standard-psr-7-http-message-interfaces/</link>
      <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/php-fig-standard-psr-7-http-message-interfaces/</guid>
      <description>Le specifiche PSR-7 descrivono una proposta di standardizzazione delle interfacce per i messaggi HTTP.
Come sappiamo, il protocollo HTTP, attraverso le specifiche redatte dal W3C, definisce una serie di regole di comunicazione che vengono implementate dalle applicazioni client e server che lo adottano.
A prima vista niente di nuovo sotto il Sole dunque, ma cerchiamo insieme di comprendere l&amp;rsquo;insieme di problematiche che sono al centro di questo nuovo dibattito che riguarda gli standard di codifica del linguaggio PHP.</description>
    </item>
    
    <item>
      <title>Software testing: Coverage vs Efficacia</title>
      <link>https://engineering.facile.it/blog/ita/software-testing-coverage-vs-efficacia/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/software-testing-coverage-vs-efficacia/</guid>
      <description>Controllare il tasso di coverage dei test √® un&amp;rsquo;attivit√† frequente tra gli sviluppatori.
Numerosi sono i fattori che hanno reso il code coverage popolare:
 √® una metrica facile da comprendere; si misura senza difficolt√†; √® oggettiva e imparziale; √® universale (applicabile a tutti i paradigmi di programmazione).  Ma al di l√† di questi vantaggi, possiamo affermare che una test suite con un&amp;rsquo;alta percentuale di coverage sia realmente efficace?</description>
    </item>
    
    <item>
      <title>MySQL has gone away? Come back!</title>
      <link>https://engineering.facile.it/blog/ita/mysql-has-gone-away-come-back/</link>
      <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/mysql-has-gone-away-come-back/</guid>
      <description>A ben pi√π di uno sviluppatore sar√† capitato di incappare nel comune errore MySQL server has gone away!, magari seguito da un eccezione lanciata da una delle classi PDO, come ad esempio PDOStatement::execute(): Error reading result set&amp;rsquo;s header.
Nella maggior parte dei casi, quando questo avviene in ambiente PHP, siamo connessi in maniera persistente (per fortuna!) ed a causa di una esecuzione troppo lunga, la connessione col server MySQL va in timeout.</description>
    </item>
    
    <item>
      <title>L&#39;operatore ternario √® associativo a sinistra!</title>
      <link>https://engineering.facile.it/blog/ita/operatore-ternario-e-associativo-a-sinistra/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/operatore-ternario-e-associativo-a-sinistra/</guid>
      <description>Gli operatori ternari sono diffusi in molti linguaggi di programmazione e permettono di esprimire con una sintassi breve logiche condizionali. Per utilizzarli propriamente in PHP √® per√≤ necessario conoscerne il comportamento.
Vediamo un esempio
var_dump(true ? &amp;#39;a&amp;#39; : &amp;#39;b&amp;#39; ? &amp;#39;c&amp;#39; : &amp;#39;d&amp;#39;); // OUTPUT: string(1) &amp;#34;c&amp;#34; Se state pensando che il risultato di questa espressione sia ovvio, vediamo cosa succede ad esempio in javascript
console.log(true ? &amp;#39;a&amp;#39; : &amp;#39;b&amp;#39; ?</description>
    </item>
    
    <item>
      <title>var_dump() aggiunge propriet√† pubbliche a DateTime</title>
      <link>https://engineering.facile.it/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/var_dump-aggiunge-proprieta-pubbliche-a-datetime/</guid>
      <description>PHP, fin dalla versione 5.2.0, introduce gli oggetti \DateTime per operare con date ed intervalli, fornendo finalmente un alternativa alle vecchie funzioni procedurali.
Recentemente mi sono reso conto di uno strano comportamento che si verifica quando vengono chiamate var_dump, print_r, var_export o debug_zval_dump su un istanza di \DateTime.
Considerando il seguente codice e il suo output:
$date = new \DateTime(); var_dump(isset($date-&amp;gt;date)); // OUTPUT: bool(false) ci rendiamo conto del fatto che non esiste alcuna propriet√† $date all&amp;rsquo;interno dell&amp;rsquo;istanza di \DateTime.</description>
    </item>
    
    <item>
      <title>ZVALs refcount AKA come vengono memorizzate le nostre variabili</title>
      <link>https://engineering.facile.it/blog/ita/zvals-refcount/</link>
      <pubDate>Mon, 02 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://engineering.facile.it/blog/ita/zvals-refcount/</guid>
      <description>Assegnare valori alle variabili √® sicuramente l&amp;rsquo;operazione pi√π comune all&amp;rsquo;interno di uno script PHP. Ma come vengono conservate queste informazioni dall&amp;rsquo;interprete? Vediamolo assieme!
L&amp;rsquo;unit√† fondamentale di storage dei dati in PHP √® la Zend Value (zval). Si tratta di una struct definita alla linea 334 di zend.h, la riporto qui di seguito per commentarne le propriet√†.
struct _zval_struct { zvalue_value value;	/* Il valore assegnato alla variabile */ zend_uint refcount__gc; /* Il conto delle referenze legato alla variabile */ zend_uchar type;	/* L&#39;identificativo del tipo di dato */ zend_uchar is_ref__gc; /* Flag che indica se la variabile √® o meno una referenza */ }; Il tipo di dato zvalue_value non √® altro che una union contenente tutti i tipi di dato gestiti da php, per questo ogni variabile che instanziamo in PHP, sia essa un intero o una stringa occuper√† comunque lo stesso spazio in memoria richiesto per il tipo di dato pi√π grande.</description>
    </item>
    
  </channel>
</rss>